name: TomlEv CI/CD Pipeline

# Comprehensive CI/CD pipeline with mandatory quality gates
# All tests and quality checks must pass before deployment
#
# Workflow Structure:
# 1. build-and-tests: Test across Python 3.11, 3.12, 3.13
# 2. quality-checks: Run comprehensive quality suite on all OS platforms
# 3. build-artifacts: Build packages (requires both 1&2 to succeed)
# 4. test-installation: Verify package installation
# 5. coveralls: Upload coverage (main branch only)
# 6. pypi-publish: Deploy to PyPI (releases only, after all gates pass)

on:
  push:
    branches: [ main, develop ]

  pull_request:
    types: [ assigned, opened, synchronize, reopened ]

  release:
    types: [ published ]


env:
  UV_CACHE_DIR: /tmp/.uv-cache  # Unix cache directory
  # Windows cache is handled per-job due to path differences
jobs:
  # Test suite across multiple Python versions
  # Tests must pass on all supported Python versions (3.11, 3.12, 3.13)
  build-and-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [ '3.11', '3.12', '3.13' ]
      fail-fast: false  # Continue testing other versions even if one fails

    steps:
      - uses: actions/checkout@v4

      - name: "Set up Python ${{ matrix.python-version }}"
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install uv
        uses: astral-sh/setup-uv@v6

      - name: Restore uv cache
        uses: actions/cache@v4
        with:
          path: /tmp/.uv-cache
          key: uv-${{ runner.os }}-${{ hashFiles('uv.lock') }}
          restore-keys: |
            uv-${{ runner.os }}-

      - name: Install dependencies
        run: uv sync --dev
        continue-on-error: false

      - name: Run comprehensive test suite
        run: uv run pytest -v --tb=native -p no:warnings --cov-fail-under 90 --cov
        continue-on-error: false  # MANDATORY: Tests must pass with 90%+ coverage

      - name: Minimize uv cache
        run: uv cache prune --ci

  # Comprehensive quality checks across multiple platforms
  # This job is MANDATORY and must achieve 100% success rate
  quality-checks:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest, macos-latest ]
        python-version: [ '3.11' ]
      fail-fast: true  # Fail immediately if any OS fails quality checks

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install uv
        uses: astral-sh/setup-uv@v6

      - name: Restore uv cache (Unix)
        if: runner.os != 'Windows'
        uses: actions/cache@v4
        with:
          path: /tmp/.uv-cache
          key: uv-${{ runner.os }}-${{ hashFiles('uv.lock') }}
          restore-keys: |
            uv-${{ runner.os }}-

      - name: Restore uv cache (Windows)
        if: runner.os == 'Windows'
        uses: actions/cache@v4
        with:
          path: ~\AppData\Local\Temp\.uv-cache
          key: uv-${{ runner.os }}-${{ hashFiles('uv.lock') }}
          restore-keys: |
            uv-${{ runner.os }}-

      - name: Install dependencies
        run: uv sync --dev
        continue-on-error: false

      - name: Run comprehensive quality checks
        run: uv run scripts/quality_check.py
        continue-on-error: false  # MANDATORY: Quality checks must pass

      - name: Minimize uv cache
        run: uv cache prune --ci

  # Coverage reporting for main branch
  # Generates detailed coverage reports and uploads to Coveralls
  coveralls:
    needs: build-and-tests
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install uv
        uses: astral-sh/setup-uv@v6

      - name: Restore uv cache
        uses: actions/cache@v4
        with:
          path: /tmp/.uv-cache
          key: uv-${{ runner.os }}-${{ hashFiles('uv.lock') }}
          restore-keys: |
            uv-${{ runner.os }}-

      - name: Install dependencies
        run: uv sync --dev
        continue-on-error: false

      - name: Run tests with XML coverage report
        run: uv run pytest -v --tb=native -p no:warnings --cov-fail-under 90 --cov --cov-report xml
        continue-on-error: false

      - name: Build lcov coverage file
        run: uv run coverage lcov
        continue-on-error: false

      - name: Minimize uv cache
        run: uv cache prune --ci

      - name: Upload coverage to Coveralls
        uses: coverallsapp/github-action@master
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          path-to-lcov: coverage.lcov

  # Build package artifacts (wheel and source distribution)
  # Only runs after ALL tests pass and quality checks achieve 100% success
  build-artifacts:
    needs: [ build-and-tests, quality-checks ]  # MANDATORY: Both must succeed
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install uv
        uses: astral-sh/setup-uv@v6

      - name: Restore uv cache
        uses: actions/cache@v4
        with:
          path: /tmp/.uv-cache
          key: uv-${{ runner.os }}-${{ hashFiles('uv.lock') }}
          restore-keys: |
            uv-${{ runner.os }}-

      - name: Install dependencies
        run: uv sync --dev
        continue-on-error: false

      - name: Build wheel and source distribution
        run: uv build
        continue-on-error: false

      - name: Minimize uv cache
        run: uv cache prune --ci

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

  # Test installation of built packages
  # Ensures the wheel can be installed and imported successfully
  test-installation:
    needs: build-artifacts
    runs-on: ubuntu-latest

    steps:
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: false
          ignore-empty-workdir: true

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

      - name: Test wheel installation and import
        run: |
          uv pip install --system dist/*.whl
          python -c "import tomlev; print(f'TomlEv {tomlev.__version__} installed successfully')"
        continue-on-error: false

  # Publish to PyPI on release
  # Only runs for published releases after all quality gates pass
  pypi-publish:
    needs: [ build-artifacts, test-installation ]
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'published'

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

      - name: Publish package to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
